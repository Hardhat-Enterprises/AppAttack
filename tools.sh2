#!/bin/bash

# Colors for echo
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Define log file
LOG_FILE="$HOME/security_tools.log"

# Function to display help menu
display_help() {
    echo -e "${YELLOW}Interactive Help Menu:${NC}"
    echo "1) osv-scanner: Scan a directory for vulnerabilities"
    echo "   - Download: https://github.com/google/osv-scanner"
    echo "2) snyk cli: Test code locally or monitor for vulnerabilities"
    echo "   - Download: https://snyk.io/download/"
    echo "   - Run code test locally: snyk code test <directory>"
    echo "   - Monitor for vulnerabilities: snyk monitor <directory> --all-projects"
    echo "3) brakeman: Scan a Ruby on Rails application for security vulnerabilities"
    echo "   - Download: https://github.com/presidentbeef/brakeman"
    echo "4) nmap: Network exploration and security auditing tool"
    echo "   - Download: https://nmap.org/download.html"
    echo "5) nikto: Web server scanner"
    echo "   - Download: https://cirt.net/nikto/"
    echo "6) OWASP ZAP: Web application security testing tool"
    echo "   - Download: https://github.com/zaproxy/zaproxy/releases"
    echo "7) Help: Display this help menu"
    echo "8) Exit: Exit the script"
}

# Function to log messages
log_message() {
    local message="$1"
    echo "$(date +"%Y-%m-%d %H:%M:%S") - $message" >> "$LOG_FILE"
}

check_updates() {
    log_message "Checking for updates..."
    
    # Update APT package lists if needed
    if [ $(sudo find /var/lib/apt/lists -type f -mtime +1 | wc -l) -gt 0 ]; then
        sudo apt update -qq
    fi
    
    # Update Brakeman
    update_brakeman
    
    # Update Snyk
    update_snyk
    
    # Update OWASP ZAP
    update_owasp_zap
    
    # Update Nikto
    update_nikto
    
    # Update Nmap
    update_nmap
}

update_brakeman() {
    sudo gem update brakeman > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        log_message "Gems already up-to-date: brakeman"
    else
        log_message "Failed to update brakeman"
    fi
}

update_snyk() {
    if ! command -v snyk &> /dev/null; then
        sudo npm install -g --unsafe-perm snyk > /dev/null 2>&1
        log_message "Snyk installed"
    else
        current_version=$(snyk --version)
        latest_version=$(npm show snyk version)
        if [ "$current_version" != "$latest_version" ]; then
            sudo npm install -g --unsafe-perm snyk@latest > /dev/null 2>&1
            log_message "Snyk updated to version $latest_version"
        else
            log_message "Snyk is up-to-date (version $current_version)"
        fi
    fi
}

update_owasp_zap() {
    if ! command -v zaproxy &> /dev/null; then
        sudo apt install -y zaproxy > /dev/null 2>&1
        log_message "OWASP ZAP installed"
    else
        current_version=$(dpkg -s zaproxy | grep '^Version:' | awk '{print $2}')
        latest_version=$(apt-cache policy zaproxy | grep 'Candidate:' | awk '{print $2}')
        if [ "$current_version" != "$latest_version" ]; then
            sudo apt install -y zaproxy > /dev/null 2>&1
            log_message "OWASP ZAP updated to version $latest_version"
        else
            log_message "OWASP ZAP is up-to-date (version $current_version)"
        fi
    fi
}


update_nikto() {
    if ! command -v nikto &> /dev/null; then
        sudo apt install -y nikto > /dev/null 2>&1
        log_message "Nikto installed"
    else
        cd /tmp
        if [ -d "nikto" ]; then
            sudo rm -rf nikto
        fi
        git clone https://github.com/sullo/nikto.git > /dev/null 2>&1
        cd nikto/program
        sudo cp nikto.pl /usr/local/bin/nikto > /dev/null 2>&1
        sudo chmod +x /usr/local/bin/nikto
        log_message "Nikto updated"
    fi
}

update_nmap() {
    if ! command -v nmap &> /dev/null; then
        sudo apt install -y nmap > /dev/null 2>&1
        log_message "Nmap installed"
    else
        current_version=$(nmap --version | head -n 1 | awk '{print $3}')
        latest_version=$(apt-cache policy nmap | grep 'Candidate:' | awk '{print $2}')
        if [ "$current_version" != "$latest_version" ]; then
            sudo apt install -y nmap > /dev/null 2>&1
            log_message "Nmap updated to version $latest_version"
        else
            log_message "Nmap is up-to-date (version $current_version)"
        fi
    fi
}

log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
}



# Function to install Go if not installed
install_go() {
    echo -e "${YELLOW}Installing Go...${NC}"
    sudo apt update && sudo apt install -y golang-go
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}Go installed successfully!${NC}"
    else
        echo -e "${RED}Failed to install Go.${NC}"
        exit 1
    fi
}

# Function to install npm if not installed
install_npm() {
    echo -e "${YELLOW}Installing npm...${NC}"
    sudo apt update && sudo apt install -y npm
    if [ $? -eq 0 ]; then
        sudo chown -R $(whoami) ~/.npm
        echo -e "${GREEN}npm installed successfully!${NC}"
    else
        echo -e "${RED}Failed to install npm.${NC}"
        exit 1
    fi
}



install_snyk_cli() {
    if ! command -v npm &> /dev/null; then
        install_npm
    fi
    if ! command -v snyk &> /dev/null; then
        echo -e "${YELLOW}Installing snyk cli...${NC}"
        # Check if snyk file exists, remove it if it does
        if [ -f /usr/local/bin/snyk ]; then
            sudo rm /usr/local/bin/snyk
        fi
        # Add a short sleep command to ensure the file is removed
        sleep 1
        sudo npm install -g snyk
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}Snyk cli installed successfully!${NC}"
            echo -e "${YELLOW}Authenticating snyk...${NC}"
            echo -e "${RED}Please authenticate by clicking 'Authenticate' in the browser to continue.${NC}"
            snyk auth
        else
            echo -e "${RED}Failed to install snyk cli.${NC}"
            exit 1
        fi
    else
        echo -e "${GREEN}snyk cli is already installed.${NC}"
    fi
}

# Function to install brakeman
install_brakeman() {
    if ! command -v brakeman &> /dev/null; then
        echo -e "${YELLOW}Installing brakeman...${NC}"
        sudo gem install brakeman
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}Brakeman installed successfully!${NC}"
        else
            echo -e "${RED}Failed to install brakeman.${NC}"
            exit 1
        fi
    else
        echo -e "${GREEN}brakeman is already installed.${NC}"
    fi
}

# Function to install osv-scanner
install_osv_scanner() {
    if ! command -v osv-scanner &> /dev/null; then
        echo -e "${YELLOW}Installing osv-scanner...${NC}"
        go install github.com/google/osv-scanner/cmd/osv-scanner@v1
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}osv-scanner installed successfully!${NC}"
            echo 'export PATH=$PATH:'"$(go env GOPATH)"/bin >> ~/.bashrc
            source ~/.bashrc
        else
            echo -e "${RED}Failed to install osv-scanner.${NC}"
            exit 1
        fi
    else
        echo -e "${GREEN}osv-scanner is already installed.${NC}"
    fi
}


# Function to install nmap
install_nmap() {
    if ! command -v nmap &> /dev/null; then
        echo -e "${YELLOW}Installing nmap...${NC}"
        sudo apt update && sudo apt install -y nmap
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}nmap installed successfully!${NC}"
        else
            echo -e "${RED}Failed to install nmap.${NC}"
            exit 1
        fi
    else
        echo -e "${GREEN}nmap is already installed.${NC}"
    fi
}

# Function to install nikto
install_nikto() {
    if ! command -v nikto &> /dev/null; then
        echo -e "${YELLOW}Installing nikto...${NC}"
        sudo apt update && sudo apt install -y nikto
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}nikto installed successfully!${NC}"
        else
            echo -e "${RED}Failed to install nikto.${NC}"
            exit 1
        fi
    else
        echo -e "${GREEN}nikto is already installed.${NC}"
    fi
}


# Function to install OWASP ZAP

install_owasp_zap() {
    if [ ! -d "/opt/owasp-zap/ZAP_2.15.0" ]; then
        echo -e "${YELLOW}Installing OWASP ZAP...${NC}"
        wget https://github.com/zaproxy/zaproxy/releases/download/v2.15.0/ZAP_2.15.0_Linux.tar.gz -P /tmp
        if [ $? -eq 0 ]; then
            tar -xf /tmp/ZAP_2.15.0_Linux.tar.gz -C /opt/owasp-zap/
            sudo rm -rf /opt/owasp-zap/ZAP_2.15.0
            sudo mv /opt/owasp-zap/ZAP_2.15.0 /opt/owasp-zap/
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}OWASP ZAP installed successfully!${NC}"
            else
                echo -e "${RED}Failed to move OWASP ZAP.${NC}"
                exit 1
            fi
        else
            echo -e "${RED}Failed to download OWASP ZAP.${NC}"
            exit 1
        fi
    else
        echo -e "${GREEN}OWASP ZAP is already installed.${NC}"
    fi
}


# Function to run OWASP ZAP
run_owasp_zap() {
    read -p "Enter directory to scan: " directory
    if [ ! -d "$directory" ]; then
        echo -e "${RED}Directory not found.${NC}"
        return 1
    fi

    echo -e "${YELLOW}Running OWASP ZAP...${NC}"
    /opt/owasp-zap/ZAP_2.15.0/zap.sh -quickurl "$directory" &

    if [ $? -eq 0 ]; then
        echo -e "${GREEN}OWASP ZAP started successfully!${NC}"
    else
        echo -e "${RED}Failed to start OWASP ZAP.${NC}"
        return 1
    fi
}

   # Function to check for updates
check_updates() {
    read -p "Do you want to check for updates? (y/n): " check_updates
    if [[ "$check_updates" == "y" ]]; then
        log_message "Checking for updates..."
        update_brakeman
        update_snyk
        update_owasp_zap
        update_nikto
        update_nmap
        echo -e "${GREEN}Updates checked successfully.${NC}"
    else
        echo -e "${YELLOW}Skipping updates check.${NC}"
    fi
}
    
    

# Main function to check and install tools
main() {
 
   # Initialize log file
    echo "" > "$LOG_FILE"
    
    # Check if npm is installed
    if ! command -v npm &> /dev/null; then
        install_npm
    fi
    # Check if Go is installed
    if ! command -v go &> /dev/null; then
        install_go
    fi
    # Check and install osv-scanner
    install_osv_scanner
    # Check and install snyk cli
    install_snyk_cli
    # Check and install brakeman
    install_brakeman
    # Check and install nmap
    install_nmap
    # Check and install nikto
    install_nikto
    # Check and install OWASP ZAP
    install_owasp_zap
    
     
    check_updates

    # Display help menu
    display_help

  
    
   while true; do
        read -p "Choose an option (8 for help): " choice
        # Check if user has already chosen to output to a text file and stop asking them if they have
        if [ -z "$output_to_file" ]; then
            read -p "Do you want to output the results to a text file? Results are saved to /home/kali (y/n): " output_to_file
        fi
        output=""
        if [[ "$output_to_file" == "y" ]]; then
            case $choice in
                1) output="/home/kali/osv-scanner-results.txt" ;;
                2) output="/home/kali/snyk-results.txt" ;;
                3) output="/home/kali/brakeman-results.txt" ;;
                4) output="/home/kali/nmap-results.txt" ;;
                5) output="/home/kali/nikto-results.txt" ;;
            esac
        fi

        case $choice in
            1)
                read -p "Enter directory to scan: " directory
                source ~/.bashrc
                osv-scanner --recursive "$directory" > $output
                ;;
            2)
                read -p "Select Snyk option:
                1) Run code test locally
                2) Monitor for vulnerabilities and see results in Snyk UI
                Enter your choice (1/2): " snyk_option
                case $snyk_option in
                    1)
                        read -p "Enter directory to scan (current directory ./): " directory
                        snyk code test $directory > $output
                        ;;
                    2)
                        read -p "Enter directory to scan (current directory ./): " directory
                        snyk monitor $directory --all-projects > $output
                        ;;
                    *)
                        echo -e "${RED}Invalid choice!${NC}"
                        ;;
                esac
                ;;
            3)
                read -p "Enter directory to scan (current directory ./): " directory
                sudo brakeman $directory --force > $output
                ;;
            4)
                read -p "Enter URL or IP address to scan: " url
                nmap -v -A -oG - "$url" > $output
                ;;
            5)
                read -p "Enter URL to scan: " url
                nikto -h $url > $output
                ;;
            6)
                 # Call the function
	         run_owasp_zap
                ;;
            7)
                echo -e "${YELLOW}Exiting...${NC}"
                exit 0
                ;;
            8)
                display_help
                ;;
            9)
               check_updates
               ;;
           
            10)
                echo -e "${YELLOW}Exiting...${NC}"
                log_message "Script ended"
                exit 0
                ;;
            11)
                echo -e "${RED}Invalid choice, please try again.${NC}"
                log_message "Invalid user input"
                ;;
                
          
        esac
    done
}

# Execute main function
main



